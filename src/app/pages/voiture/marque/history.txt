
  openModal(errorMessage: string = '') {
    const data = {
      title: 'Ajouter un nouveau Marque',
      fields: [
        { name: 'libelle', label: 'Marque', type: 'text', required: true, defaultValue: '' },
      ],
      submitText: 'Ajouter',
      errorMessage: errorMessage  // Ajout du message d'erreur pour la modale
    };

    console.log(data);

    const dialogRef = this.dialog.open(GenericModalComponent, {
      width: '400px',
      data: data,
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        try {
          console.log('Données du formulaire:', result);

          // Si l'employé n'existe pas, vous pouvez procéder à l'ajout
          this.newMarque = result.libelle;
          this.addNewMarque();

        } catch (error: any) { // Spécifier que error est de type 'unknown'
          console.error("erreur ajout :" + error);
          if (error instanceof Error) { // Vérification du type réel de l'erreur
            console.error('Erreur lors de l’ajout:', error.message);
            // Ouvrir la modale avec un message d'erreur spécifique
            this.openModal('Erreur lors de l’ajout de l’employé : ' + error.message);
          } else {
            console.error('Erreur inconnue lors de l’ajout');
            this.openModal('Erreur inconnue lors de l’ajout de l’employé.');
          }
        }
      }
    });
  }

  // Fonction pour ajouter un employé
  addNewMarque() {
    if (this.newMarque) {
      console.log(this.newMarque);
      // Envoyer les données au backend via MarqueService
      this.marqueService.addMarque(this.newMarque).subscribe({
        next: (marque) => {
          console.log('Marque ajoutée avec succès:', marque);

          // Ajouter la nouvelle marque localement
          this.marques.push(marque);

          // Calculer le nombre total d'éléments dans la page actuelle
          const startIndex = this.currentPage * this.pageSize;
          const endIndex = startIndex + this.pageSize;

          // Vérifier si la page actuelle a encore de la place
          if (this.marques.length > startIndex && this.marques.length <= endIndex) {
            // La page actuelle a encore de la place, on reste dessus
          } else {
            // Aller à la dernière page si la page actuelle est pleine
            this.currentPage = Math.floor((this.marques.length - 1) / this.pageSize);
          }

          // Mettre à jour la pagination après ajout
          this.updatePagination();

          // Réinitialiser le formulaire
          this.newMarque = "";
        },
        error: (error) => {
          console.error(error);
          // Vérifier si l'erreur contient un message
          const errorMessage = error.toString().replace("Error: ", "");
          alert(errorMessage);
          throw new Error(errorMessage);
        }
      });
    }
  }


  openEditModal(marque: Marque) {
    const data = {
      title: 'Modifier un marque',
      fields: [
        { name: 'libelle', label: 'Marque', type: 'text', required: true, defaultValue: marque.libelle }
      ],
      submitText: 'Modifier',
      errorMessage: ''
    };

    const dialogRef = this.dialog.open(GenericModalComponent, {
      width: '400px',
      data: data,
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        console.log('Modification enregistrée:', result);

        // Mettre à jour les infos de l’employé sélectionné
        const index = this.marques.findIndex(mq => mq.id === marque.id);
        if (index !== -1) {
          this.marques[index] = { ...this.marques[index], ...result };
          this.updatePagination(); // Rafraîchir la liste affichée
        }
      }
    });
  }

  deleteMarque(marqueId: string) {
    console.log('Deleting marque with ID:', marqueId);
    this.marques = this.marques.filter(mq => mq._id !== marqueId);

    // Calculer le nombre total de pages après suppression
    const totalPages = Math.ceil(this.marques.length / this.pageSize);

    // Si on est sur une page vide après suppression, revenir à la dernière page disponible
    if (this.currentPage >= totalPages) {
      this.currentPage = Math.max(0, totalPages - 1); // Ne pas descendre en dessous de 0
    }

    this.updatePagination(); // Mettre à jour l'affichage
  }